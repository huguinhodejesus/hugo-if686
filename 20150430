data Failable t = Error String | Success t
	deriving (Show)

instance Monad Failable where
	(>>=) (Error x) _ = Error x
	(>>=) (Success x) f = f x
	return x = Success x
	
data Fila t = Node t Int (Fila t) | Nil 
	deriving(Show)

criarFila :: Int -> t -> Failable (t, Fila t)
criarFila size first
	| size < 1 = Error "Queue size too small"
	| otherwise = Success (first, Node first size (Nil))

getSize :: Fila t -> Int
getSize Nil = 0
getSize (Node _ _ next) = 1 + getSize(next)

retornaFila :: (Eq t) => t -> FilaT t -> FilaT t
retornaFila num (Fila x nextElem size)
	|nextElem == Nil = (Fila x (Fila num Nil size) size)
	|otherwise = Fila x (retornaFila num nextElem) size

push :: (Eq t) => t -> FilaT t ->  Failable (t, FilaT t)
push num (Fila x nextElem size)
	|((tamanho (Fila x nextElem size)) >= size) = Error "Fila cheia :I "
	|otherwise = Correct (num, retornaFila num (Fila x nextElem size))

pop :: FilaT t -> Failable (t, FilaT t)
pop Nil = Error "Fila vazia :I"
pop (Fila x nextElem size) = Correct (x, nextElem)
