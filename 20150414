--Questao 1
compose :: (t -> t) -> [(t -> t)] -> [(t -> t)]
compose g [] = []
compose g (f:fs) = ((g . f) : compose g fs)


--Questao 2 
mapGraph :: (a -> b) -> Graph a -> Graph b
mapGraph _ Nil = Nil
mapGraph f (Node1 n a g) = ((Node1 (f n)) (mapAdjacente f a) (mapGraph f g))

mapAdjacente :: (a -> b) -> [(a, Int)] -> [(b, Int)]
mapAdjacente _ [] = []
mapAdjacente f ((i, p):xs) = (((f i), p): mapAdjacente f xs)

teste :: Graph Int
teste = (Node1 1 [(2, 1), (3, 3),(4,4)] (Node1 2 [(2, 2),(3,3)] (Node1 3 [(3,3),(4,4)] (Node1 4 [(1,2),(4,1)] (Nil)))))

mapGraph (times2) teste
foldGraph (+) teste

foldGraph :: (Num a) => (a -> a -> a) -> Graph a -> a
foldGraph _ Nil = 0
foldGraph f (Node1 n a g) = f n (foldGraph f g)

times2 :: Int -> Int
times2 n = 2 * n



--Questao 3
filterTree :: (t->Bool) -> Tree t -> [Tree t]
filterTree f NilT = []
filterTree f (Node n a b) 
	| f n = [   (Node n (check2 f a ) (check2 f b)) ] ++ (filterTree f (check f a)) ++ (filterTree f (check f b))
	| otherwise = (filterTree f a) ++ (filterTree f b)


check2 ::  (t->Bool) -> Tree t -> Tree t
check2 f NilT = NilT
check2 f (Node n l r) 
   | f n = (Node n (check2 f l) (check2 f r))
   | otherwise = NilT

check :: (t->Bool) -> Tree t -> Tree t
check f NilT = NilT
check f (Node n l r) 
	| f n =   joker  f [l,r]
	| otherwise = (Node n l r)

joker :: (t->Bool) -> [Tree t] -> Tree t 
joker  _ [] = NilT
joker f ((Node n l r):xs) 
	| f n = joker f xs
	| otherwise = (Node n l r)  
	
--ExercÃ­cios feitos na aula

--f l n = filter (pred l) where pred n = (foldr (+) 0 n) >=n

f2 l n = filter (\x -> ((foldr (+) 0 x) >= n)) l

mapfilter:: (Eq a,b) => ((a->b) -> [a] -> [b]) -> ((a -> Bool) -> [a] -> [a]) 
