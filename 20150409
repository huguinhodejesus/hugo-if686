--Questao 01

--type Ponto = Int
--type Peso = Int
--type Aresta = (Ponto,Ponto)
--type Grafo = [(Aresta,Peso)]

--data Graph = Grafo deriving (Eq, Ord, Show)

data List t = Nill
   | Cons (t, Int) (List t)
  	deriving (Show, Eq)

data Graph t = Nil
	| No t (List t) (Graph t)
		deriving (Show, Eq)

--exemplo
-- let a = No 5 (Cons (8,2) Nill ) (No 6 (Cons (4,2) Nill) Nil)

--Questao 02

graphProf :: Eq t => Graph t -> t -> Bool
graphProf Nil c = False
graphProf (No t a b) c
	| c == t = True
	| otherwise = graphProf b c

--ExercÃ­cios feitos em sala

member :: (Eq a) => a -> [a] -> Bool
member _ [] = False
member x (l:ls)
	| x == l = True
	| otherwise = member x ls

union :: (Eq a) => [a] -> [a] -> [a]
union xs [] = xs
union [] ls = ls
union (x:xs) ls
	| (member x ls) = union xs ls
	| otherwise = union xs $ [x] ++ ls
