//Trabalho 12

public class MultiplicaMatrizes {
	
	static int x = 3;
	static int y = 4;
	static int z = 2;
	static int qtd = x;
	
	static int A[][] = new int [x][y];
	static int B[][] = new int[y][z];
	static int C[][] = new int [x][z];
	
	static Thread[] t = new Multiplicador[qtd];

	public static void main(String[] args) {
		int matriz [][] = new int [x][z];

		for (int i = 0; i < x; i++) {
			for (int j = 0; j < y; j++) {
				A[i][j] = 1; 
			}
		}

		for (int i = 0; i < y; i++) {
			for (int j = 0; j < z; j++) {
				B[i][j] = 3; 
			}
		}

		for (int i = 0; i < qtd; i++) {
			t[i] = new Multiplicador(i);
			t[i].start();
		}

		for (int i = 0; i < qtd; i++) {
			try {
				t[i].join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		for (int i = 0; i < x; i++) {
			for (int j = 0; j < z; j++) {
				System.out.print(C[i][j] + " ");
			}
			System.out.println();
		}
	}
	public static class Multiplicador extends Thread{
		int n;

		public Multiplicador(int linhaEmA){
			n = linhaEmA; 
		}

		public void run(){
			
			for (int i = 0; i < z; i++) { 
				
				C[n][i] = 0;
				
				for (int j = 0; j < y; j++) { 
					
					C[n][i] += (A[n][j] * B[j][i]);
				}
			}			
		}
	}
}


// Exercícios da Aula

//Exercício 1

public class ImprimirNumeros extends Thread{

	long n = 1000000000;
	
	public void run(){
		
		while (n<2000000001){
		System.out.println(n);
		n++;
		
		}
	}
	
	public static void main(String[] args) {
		
		Thread i = new ImprimirNumeros();
		Thread ii = new ImprimirNumeros();
		Thread iii = new ImprimirNumeros();
		Thread iv = new ImprimirNumeros();
		Thread v = new ImprimirNumeros();
		Thread vi = new ImprimirNumeros();
		Thread vii = new ImprimirNumeros();
		Thread viii = new ImprimirNumeros();
		Thread ix = new ImprimirNumeros();
		Thread x = new ImprimirNumeros();
		Thread xi = new ImprimirNumeros();
		Thread xii = new ImprimirNumeros();
		Thread xiii = new ImprimirNumeros();
		Thread xiv = new ImprimirNumeros();
		Thread xv = new ImprimirNumeros();
		Thread xvi = new ImprimirNumeros();
		Thread xvii = new ImprimirNumeros();
		Thread xviii = new ImprimirNumeros();
		Thread xix = new ImprimirNumeros();
		Thread xx = new ImprimirNumeros();
		
		i.start();
		ii.start();
		iii.start();
		iv.start();
		v.start();
		vi.start();
		vii.start();
		viii.start();
		ix.start();
		x.start();
		xi.start();
		xii.start();
		xiii.start();
		xiv.start();
		xv.start();
		xvi.start();
		xvii.start();
		xviii.start();
		xix.start();
		xx.start();
		
	}

}

//Exercício 2

import java.util.Scanner;

public class Contador extends Thread{
	 
	String nome;
	int limite;
	
	public Contador(String nome, int limite){
		this.nome = nome;
		this.limite = limite;
	}
	
	public void run(){
		
		int n=1;
		while (n<limite+1){
		System.out.println(nome+ ": "+n);
		n++;
		
		}
	}
	
	public static void main(String[] args) {
		
		System.out.println("Escolha o limite da contagem: ");
		Scanner scanner = new Scanner( System.in );
		int limite = scanner.nextInt();
		
		Thread i = new Contador("Contador 1",limite);
		Thread ii = new Contador("Contador 2",limite);
		
		
		i.start();
	//	try{
	//		i.join();
	//	}catch (InterruptedException ie){
	//		System.out.println("Erro");
	//	}
		ii.start();
		
		
	}

}

//Por que as saídas das threads se misturam?
//Porque cada uma possui seu próprio valor n como atributo e funcionam ao mesmo tempo.


