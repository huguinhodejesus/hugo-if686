
//1

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Trabalho13 {
	
	public long numero;
	public Lock trava;
	public int nome;
	
	public Trabalho13(int nome){
		
		this.nome = nome;
		this.numero = 0;
		trava = new ReentrantLock();
	}
	
	synchronized void obterFicha(){
		
		this.trava.lock();
		try{
			numero++;
			System.out.println("Obtida ficha " + numero + " pela thread " + nome);
		} finally{
			this.trava.unlock();
		}
	}
	
	public static void main(String[] args) {

		int nome = 0;
		
		Trabalho13 fichas = new Trabalho13(nome);
		
		Thread[] threads = new Thread[50]; 
		
		MyThread t = new MyThread(fichas);
		
		for (int i = 0; i < 50; i ++){															
			threads[i] = (new Thread(t));
			threads[i].start();	
		}
		
		for (int i = 0; i < 50; i ++){
			try {
				threads[i].join();	
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
	}
}

class MyThread implements Runnable {

	Trabalho13 fichas;
	
	public MyThread (Trabalho13 fichas){
		
		this.fichas = fichas;
	}
	
	public void run() {
		
		for (int i = 0; i < 10; i++){
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			fichas.obterFicha();
		}
	}

}


//Há tratamento com travas na minha solução.

//2

// Propriedades Safety: Diz respeito à segurança do programa, onde o programa vai funcionar sem violações quanto ao seu andamento. São propriedades de corretude.

// Duas threads nunca obtém acesso a uma posição do vetor ao mesmo tempo;
// A operação de troca (swap) dos valores em posições distintas deve ser atômica.

//Propriedades Liveness: Diz respeito à vivacidade do programa, onde a eficiência do programa é quem estará em jogo.

// Para um vetor de tamanho N, até K <= N Threads podem manipular elementos do vetor simultaneamente (considere que N é múltiplo de K).
// O programa não entra em deadlock

//Meu programa anterior segue as propriedades citadas, todas elas são obedecidas.
